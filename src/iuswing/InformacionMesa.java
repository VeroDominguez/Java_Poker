
package iuswing;

import dominio.EventoFachada;
import dominio.Fachada;
import dominio.juego.EventoJuego;
import dominio.juego.Mano;
import dominio.juego.Mesa;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import utilidades.Observable;
import utilidades.Observador;

public class InformacionMesa extends javax.swing.JDialog implements Observador{

    private Mesa mesa;

    /**
     * Creates new form DetalleMesa
     */
    public InformacionMesa(java.awt.Frame parent, boolean modal, Mesa mesa) {//es necesario pasarle una mesa por parametros??
        super(parent, modal);
        initComponents();
        mostrarTablaManos(mesa);
        Fachada.getInstancia().agregar(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lableTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableManos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lableTitulo.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        lableTitulo.setText("Información de las manos de la mesa");

        tableManos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nº de Mano", "Cantidad de Jugadores", "Total Apostado", "Estado Actual", "Jugador Ganador", "Figura Ganadora"
            }
        ));
        jScrollPane1.setViewportView(tableManos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lableTitulo)
                        .addGap(0, 131, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lableTitulo)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lableTitulo;
    private javax.swing.JTable tableManos;
    // End of variables declaration//GEN-END:variables

    private void mostrarTablaManos(Mesa mesa) {
        ArrayList<Mano> manos= mesa.getManos();
        String[] columnas= {"Nº de Mano", "Cantidad de Jugadores", "Total Apostado", "Estado Actual", "Jugador Ganador", "Jugador Ganador"};
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0);
        for(Mano mano: manos){
            Object[] fila= {mano.getNumeroMano(), mano.getCantidadJugadoresActivos(), mano.getTotalApostadoMano(), mano.getestadoMano(), mano.getJugadorGanador(), mano.getFiguraGanadora()};
            modelo.addRow(fila);
        }
        tableManos.setModel(modelo); 
        
        lableTitulo.setText("Información de las manos de la mesa " + mesa.getNumeroMesa());
    }

    @Override
    public void actualizar(Observable origen, Object evento) {

        //chequear si toma la mesa
        if(evento.equals(EventoJuego.MESA_ACTUALIZARJUGADORES)){
         
            mostrarTablaManos(this.mesa);
        }
        
        if(evento.equals(EventoFachada.MESA_ACTUALIZARJUGADORES)){
         
            mostrarTablaManos(this.mesa);
        }
        
        if(evento.equals(EventoFachada.MESA_INICIADA)){
            mostrarTablaManos(this.mesa);
        }
        if(evento.equals(EventoFachada.MESA_FINALIZADA)){
         
            mostrarTablaManos(this.mesa);
        }
        
        if(evento.equals(EventoFachada.MESA_NUEVA)){    
            mostrarTablaManos(this.mesa);
        }
        if(evento.equals(EventoFachada.MANO_ESPERANDOAPUESTA)){
         
            mostrarTablaManos(this.mesa);
        }
        if(evento.equals(EventoFachada.MANO_PIDIENDOCARTAS)){
         
            mostrarTablaManos(this.mesa);
        }
        if(evento.equals(EventoFachada.MANO_TERMINADA)){
         
            mostrarTablaManos(this.mesa);
        }
        if(evento.equals(EventoFachada.MANO_APUESTAINICIADA)){
         
            mostrarTablaManos(this.mesa);
        }
        
    }
}
