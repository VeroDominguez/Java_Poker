package iuswing;

import dominio.EventoFachada;
import dominio.Fachada;
import dominio.juego.Carta;
import dominio.juego.EstadoMano;
import static dominio.juego.EstadoMesa.ABIERTA;
import dominio.juego.EventoJuego;
import dominio.juego.Jugada;
import dominio.juego.Mano;
import dominio.juego.Mesa;
import static dominio.juego.SituacionJugada.NOPAGOAPUESTA;
import dominio.usuario.UsuarioJugador;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import panelCartasPoker.CartaPoker;
import panelCartasPoker.PanelCartasListener;
import panelCartasPoker.PanelCartasPokerException;
import utilidades.Observable;
import utilidades.Observador;

public class PanelCartasPoker extends javax.swing.JDialog implements PanelCartasListener, Observador {

    /**
     * Creates new form PanelCartas
     */
    private UsuarioJugador usuario;
    private Mesa mesa;

    public PanelCartasPoker(java.awt.Frame parent, boolean modal, UsuarioJugador usuario, Mesa mesa) {
        super(parent, modal);
        initComponents();
        this.usuario = usuario;
        this.mesa = mesa;
        mostrarNombre();
        mostrarNumeroMesa();
        mostrarsaldo();
        mostrarNumeroMano();
        estadoMano();
        valorPozo();
        mostrarJugadoresMesa();
        this.traerCartas();
        Fachada.getInstancia().agregar(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCartasPoker = new panelCartasPoker.PanelCartasPoker();
        habilitarPanel = new javax.swing.JCheckBox();
        checkListener = new javax.swing.JCheckBox();
        txtJugador = new javax.swing.JLabel();
        txtFiguraMasAlta = new javax.swing.JLabel();
        lblNroMesa = new javax.swing.JLabel();
        txtNroMesa = new javax.swing.JLabel();
        lblFiguraMasAlta = new javax.swing.JLabel();
        lblJugador = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        txtSaldo = new javax.swing.JLabel();
        lblNroMano = new javax.swing.JLabel();
        txtNroMano = new javax.swing.JLabel();
        lblValorPozo = new javax.swing.JLabel();
        txtValorPozo = new javax.swing.JLabel();
        lblEstadoMano = new javax.swing.JLabel();
        txtEstadoMano = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnIniciarApuesta = new javax.swing.JButton();
        btnPasar = new javax.swing.JButton();
        btnPagar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableJugadoresMesa = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFiguras = new javax.swing.JTable();
        lblFiguras = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        habilitarPanel.setText("Habilitar Panel");
        habilitarPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                habilitarPanelActionPerformed(evt);
            }
        });

        checkListener.setText("Escuchar clicks");
        checkListener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkListenerActionPerformed(evt);
            }
        });

        txtJugador.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtJugador.setText("Nombre Jugador");

        txtFiguraMasAlta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFiguraMasAlta.setText("Calcular figura");

        lblNroMesa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNroMesa.setText("N° de Mesa:");

        txtNroMesa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNroMesa.setText("Mesa");

        lblFiguraMasAlta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFiguraMasAlta.setText("Nombre figura más alta: ");

        lblJugador.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblJugador.setText("Jugador: ");

        lblSaldo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSaldo.setText("Saldo actual:");

        txtSaldo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSaldo.setText("Calcular saldo con observer");

        lblNroMano.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNroMano.setText("N° de Mano:");

        txtNroMano.setText("traer mano");

        lblValorPozo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblValorPozo.setText("Valor actual del pozo:");

        txtValorPozo.setText("traer valor pozo observer");

        lblEstadoMano.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblEstadoMano.setText("Estado actual de la Mano: ");

        txtEstadoMano.setText("traer estado mano observer ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Jugadores");

        btnIniciarApuesta.setBackground(new java.awt.Color(204, 204, 204));
        btnIniciarApuesta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnIniciarApuesta.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnIniciarApuesta.setText("Iniciar apuesta");
        btnIniciarApuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarApuestaActionPerformed(evt);
            }
        });

        btnPasar.setBackground(new java.awt.Color(204, 204, 204));
        btnPasar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPasar.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnPasar.setText("Pasar");
        btnPasar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasarActionPerformed(evt);
            }
        });

        btnPagar.setBackground(new java.awt.Color(204, 204, 204));
        btnPagar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPagar.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnPagar.setText("Pagar");

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        jButton1.setText("Cambiar cartas");

        tableJugadoresMesa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Jugador", "Situación actual"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableJugadoresMesa);

        tblFiguras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Figura", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFiguras);

        lblFiguras.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFiguras.setText("Figuras");

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(153, 0, 0));
        lblTitulo.setText("Jugada");

        jTextField1.setText("Monto apostado");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCartasPoker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(btnIniciarApuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(btnPasar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(jButton1)
                                .addGap(42, 42, 42))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblFiguras, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(117, 117, 117)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblValorPozo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFiguraMasAlta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEstadoMano, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNroMano, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNroMesa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFiguraMasAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNroMano, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSaldo)
                            .addComponent(txtNroMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEstadoMano, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValorPozo))))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkListener, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(habilitarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(264, 264, 264)
                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtEstadoMano, txtFiguraMasAlta, txtJugador, txtNroMano, txtNroMesa, txtSaldo, txtValorPozo});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblEstadoMano, lblFiguraMasAlta, lblJugador, lblNroMano, lblNroMesa, lblSaldo, lblValorPozo});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnIniciarApuesta, btnPagar, btnPasar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(habilitarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkListener))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblTitulo)))
                .addGap(46, 46, 46)
                .addComponent(panelCartasPoker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnIniciarApuesta, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(btnPasar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFiguras)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNroMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNroMano, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblEstadoMano, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblValorPozo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblFiguraMasAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(txtNroMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNroMano, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEstadoMano)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtValorPozo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFiguraMasAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 39, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblEstadoMano, lblFiguraMasAlta, lblJugador, lblNroMano, lblNroMesa, lblSaldo, lblValorPozo});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtEstadoMano, txtFiguraMasAlta, txtJugador, txtNroMano, txtNroMesa, txtSaldo, txtValorPozo});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnIniciarApuesta, btnPagar, btnPasar, jButton1});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void habilitarPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_habilitarPanelActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        panelCartasPoker.setEnabled(habilitarPanel.isSelected());
    }//GEN-LAST:event_habilitarPanelActionPerformed

    private void checkListenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkListenerActionPerformed
        if (checkListener.isSelected()) {
            panelCartasPoker.setListener(this);
        } else
            panelCartasPoker.setListener(null);
    }//GEN-LAST:event_checkListenerActionPerformed

    private void btnIniciarApuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarApuestaActionPerformed
//        UsuarioJugador jugadorActual = usuario;
//        Mano mano = this.traerMano();
//        if (mano.getEstadoMano() != EstadoMano.ESPERANDOAPUESTA) {
//            mostrarMensaje("No es posible iniciar una apuesta en este momento.");
//            return;
//        }
//
//        if (mano.jugadorYaPaso(jugadorActual)) {
//            mostrarMensaje("Ya no puedes iniciar una apuesta porque has pasado.");
//            return;
//        }
//
//        int montoApuesta = obtenerMontoApuesta(); // Método que obtiene la apuesta ingresada por el jugador
//        if (montoApuesta < 1) {
//            mostrarMensaje("Apuesta mínima: $1.");
//            return;
//        }
//
//        if (montoApuesta > jugadorActual.getSaldo()) {
//            mostrarMensaje("No tienes saldo suficiente para esa apuesta.");
//            return;
//        }
//
//        mano.iniciarApuesta(jugadorActual, montoApuesta); // Registrar la apuesta en la mano
  
    }//GEN-LAST:event_btnIniciarApuestaActionPerformed

    private void btnPasarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasarActionPerformed
        pasar();       
    }//GEN-LAST:event_btnPasarActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed


    public void traerCartas() {

        ArrayList<Mano> listaManos = mesa.getListaManos();
        int numeroMano = mesa.getListaManos().size();
        Mano mano = listaManos.get(numeroMano - 1);

        ArrayList<Jugada> listaJugadas = mano.getListaJugadas();
        Jugada jugadaUsuario = new Jugada(usuario);
        ArrayList<Carta> cartas = new ArrayList<Carta>();
        for (Jugada jugada : listaJugadas) {
            if (jugada.equals(jugadaUsuario)) {
                cartas = jugada.getListaCartasJugada();
            }
        }
        ArrayList<CartaPoker> cartasPoker = new ArrayList<CartaPoker>(cartas);
        cargarCartas(cartasPoker);

    }

    public void cargarCartas(ArrayList<CartaPoker> cartas) {
        try {
            panelCartasPoker.cargarCartas(cartas);
        } catch (PanelCartasPokerException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void clickEnCarta(CartaPoker carta) {
        JOptionPane.showMessageDialog(this, carta.toString(), "Click en carta", JOptionPane.INFORMATION_MESSAGE);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciarApuesta;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnPasar;
    private javax.swing.JCheckBox checkListener;
    private javax.swing.JCheckBox habilitarPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblEstadoMano;
    private javax.swing.JLabel lblFiguraMasAlta;
    private javax.swing.JLabel lblFiguras;
    private javax.swing.JLabel lblJugador;
    private javax.swing.JLabel lblNroMano;
    private javax.swing.JLabel lblNroMesa;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblValorPozo;
    private panelCartasPoker.PanelCartasPoker panelCartasPoker;
    private javax.swing.JTable tableJugadoresMesa;
    private javax.swing.JTable tblFiguras;
    private javax.swing.JLabel txtEstadoMano;
    private javax.swing.JLabel txtFiguraMasAlta;
    private javax.swing.JLabel txtJugador;
    private javax.swing.JLabel txtNroMano;
    private javax.swing.JLabel txtNroMesa;
    private javax.swing.JLabel txtSaldo;
    private javax.swing.JLabel txtValorPozo;
    // End of variables declaration//GEN-END:variables

    private void mostrarNombre() {
        String jugador = usuario.getNombreCompleto();
        txtJugador.setText(jugador);
    }

    private void mostrarNumeroMesa() {
        int nroMesa = mesa.getNumeroMesa();
        String mesa = "" + nroMesa;
        txtNroMesa.setText(mesa);
    }

    private void mostrarsaldo() {
        int saldo = usuario.getSaldo();
        String saldoJugador = "" + saldo;
        txtSaldo.setText(saldoJugador);
    }

    private void mostrarNumeroMano() {
        int numeroMano = mesa.getListaManos().size();
        String manos = "" + numeroMano;
        txtNroMano.setText(manos);
    }

    private void estadoMano() {
        Mano mano = this.traerMano();
        String estadoMano = "" + mano.getEstadoMano();
        txtEstadoMano.setText(estadoMano);

    }

    private void valorPozo() {
        Mano mano = this.traerMano();
        String valorPozo = "" + mano.getTotalApostadoMano();
        txtValorPozo.setText(valorPozo);
    }

    private Mano traerMano() {
        ArrayList<Mano> listaManos = mesa.getListaManos();
        int numeroMano = mesa.getListaManos().size();
        Mano mano = listaManos.get(numeroMano - 1);
        return mano;
    }

    private Jugada traerJugada() {
        ArrayList<Mano> listaManos = mesa.getListaManos();
        int numeroMano = mesa.getListaManos().size();
        Mano mano = listaManos.get(numeroMano - 1);

        ArrayList<Jugada> listaJugadas = mano.getListaJugadas();
        Jugada jugadaUsuario = new Jugada(usuario);

        for (Jugada jugada : listaJugadas) {
            if (jugada.equals(jugadaUsuario)) {
                jugadaUsuario = jugada;
            }
        }
        return jugadaUsuario;
    }

    private void mostrarJugadoresMesa() {
        ArrayList<Mesa> mesas = Fachada.getInstancia().getMesas();
        ArrayList<UsuarioJugador> jugadores = mesa.getListaJugadores();
        ArrayList<Jugada> jugadas = this.traerMano().getListaJugadas();

        String[] columnas = {"Jugador", "Situación actual"};
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0);
        for (Jugada jugada : jugadas) {
            Object[] fila = {jugada.getJugador().getNombreCompleto(), jugada.getSituacionJugada()};
            modelo.addRow(fila);

        }

        tableJugadoresMesa.setModel(modelo);
    }

    private void pasar() {
        Mano mano = this.traerMano();
        mano.registrarPase(usuario); // Registrar que el jugador pasa en la mano actual
        Jugada jugada = this.traerJugada();
        if (jugada != null) {
            jugada.setSituacionJugada(NOPAGOAPUESTA);

        }

        if (mano.todosPasaron()) { // Verificar si todos los jugadores pasaron
            mano.terminarManoSinGanador(); // Acumular pozo y terminar mano
            int pozo = mano.getTotalApostadoMano();
            mesa.iniciarMano(mesa.getListaJugadores(), pozo);
            traerCartas();
        }
    }

    @Override
    public void actualizar(Observable origen, Object evento) {
        if (evento.equals(EventoFachada.MESA_INICIADA)) {
            traerCartas();
            mostrarJugadoresMesa();
        }

        if (evento.equals(EventoFachada.MESA_INICIADA)) {
            traerCartas();
        }

        if (evento.equals(EventoFachada.MESA_FINALIZADA)) {

        }

        if (evento.equals(EventoFachada.MANO_ESPERANDOAPUESTA)) {
            estadoMano();
            valorPozo();
            mostrarJugadoresMesa();
            traerCartas();
        }
        if (evento.equals(EventoFachada.MANO_PIDIENDOCARTAS)) {
            estadoMano();
            valorPozo();
            mostrarJugadoresMesa();
        }
        if (evento.equals(EventoFachada.MANO_TERMINADA)) {
            valorPozo();
            estadoMano();
            mostrarJugadoresMesa();
        }
        if (evento.equals(EventoFachada.MANO_APUESTAINICIADA)) {
            estadoMano();
            valorPozo();
            mostrarJugadoresMesa();
        }

        if (evento.equals(EventoFachada.JUGADOR_NOPAGOAPUESTA)) {
            mostrarJugadoresMesa();
        }

    }

}
